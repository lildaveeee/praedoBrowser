#include "settings.h"
#include "mainwindow.h"

#include <QVBoxLayout>
#include <QFormLayout>
#include <QLineEdit>
#include <QPushButton>
#include <QSettings>
#include <QHBoxLayout>
#include <QColorDialog>
#include <QRandomGenerator>
#include <QMenu>
#include <QListWidget>
#include <QApplication>
#include <QTabWidget>
#include <QFrame>

// Helper function to update a button's background and label,
// now including an override for any global border rules.
static void updateButtonColor(QPushButton *button, const QColor &color)
{
    if (button) {
        // Append "border: 0px;" to override any global stylesheet
        button->setStyleSheet(QString("background-color: %1; border: 0px;")
                                  .arg(color.name()));
        button->setText(color.name());
    }
}

// Generates a random color using HSL values.
static QColor generateRandomColor()
{
    int hue = QRandomGenerator::global()->bounded(360);
    int saturation = QRandomGenerator::global()->bounded(128, 256);
    int lightness = QRandomGenerator::global()->bounded(128, 256);
    return QColor::fromHsl(hue, saturation, lightness);
}

SettingsDialog::SettingsDialog(QWidget *parent)
    : QDialog(parent)
{

    setWindowTitle("Settings");
    setMinimumSize(300, 400);

    QSettings settings("PraedoBrowser", "PraedoBrowser");

    // Initialize theme settings
    m_searchEngineEdit = new QLineEdit(this);
    m_searchEngineEdit->setText(settings.value("defaultSearchEngine",
                                               "https://www.google.com/search?q=").toString());
    // Remove any borders from the QLineEdit container.
    m_searchEngineEdit->setStyleSheet("border: 0px;");

    m_backgroundColor = QColor(settings.value("backgroundColor", "#000000").toString());
    if (!m_backgroundColor.isValid())
        m_backgroundColor = QColor(Qt::black);

    m_tabListColor = QColor(settings.value("tabListColor", "#1E1812").toString());
    if (!m_tabListColor.isValid())
        m_tabListColor = QColor("#1E1812");

    m_topBarColor = QColor(settings.value("topBarColor", "#2A2118").toString());
    if (!m_topBarColor.isValid())
        m_topBarColor = QColor("#2A2118");

    m_accent1Color = QColor(settings.value("accent1Color", "#D4B398").toString());
    if (!m_accent1Color.isValid())
        m_accent1Color = QColor("#D4B398");

    m_accent2Color = QColor(settings.value("accent2Color", "#C8BBA9").toString());
    if (!m_accent2Color.isValid())
        m_accent2Color = QColor("#C8BBA9");

    m_fontColor = QColor(settings.value("fontColor", "#D4B398").toString());
    if (!m_fontColor.isValid())
        m_fontColor = QColor("#D4B398");

    m_buttonColor = QColor(settings.value("buttonColor", "#2A2118").toString());
    if (!m_buttonColor.isValid())
        m_buttonColor = QColor("#2A2118");

    m_linkColor = QColor(settings.value("linkColor", "#D4B398").toString());
    if (!m_linkColor.isValid())
        m_linkColor = QColor("#D4B398");

    m_highlightColor = QColor(settings.value("highlightColor", "#D4B398").toString());
    if (!m_highlightColor.isValid())
        m_highlightColor = QColor("#D4B398");

    m_alternateBaseColor = QColor(settings.value("alternateBaseColor", "#19140F").toString());
    if (!m_alternateBaseColor.isValid())
        m_alternateBaseColor = QColor("#19140F");

    // Create color selection buttons.
    m_backgroundColorButton = new QPushButton(this);
    updateButtonColor(m_backgroundColorButton, m_backgroundColor);

    m_tabListColorButton = new QPushButton(this);
    updateButtonColor(m_tabListColorButton, m_tabListColor);

    m_topBarColorButton = new QPushButton(this);
    updateButtonColor(m_topBarColorButton, m_topBarColor);

    m_accent1ColorButton = new QPushButton(this);
    updateButtonColor(m_accent1ColorButton, m_accent1Color);

    m_accent2ColorButton = new QPushButton(this);
    updateButtonColor(m_accent2ColorButton, m_accent2Color);

    m_fontColorButton = new QPushButton(this);
    updateButtonColor(m_fontColorButton, m_fontColor);

    m_buttonColorButton = new QPushButton(this);
    updateButtonColor(m_buttonColorButton, m_buttonColor);

    m_linkColorButton = new QPushButton(this);
    updateButtonColor(m_linkColorButton, m_linkColor);

    m_highlightColorButton = new QPushButton(this);
    updateButtonColor(m_highlightColorButton, m_highlightColor);

    m_alternateBaseColorButton = new QPushButton(this);
    updateButtonColor(m_alternateBaseColorButton, m_alternateBaseColor);

    // Connections for individual color dialogs.
    connect(m_backgroundColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_backgroundColor, this, "Select Background Color");
        if (chosen.isValid()) {
            m_backgroundColor = chosen;
            updateButtonColor(m_backgroundColorButton, m_backgroundColor);
        }
    });
    connect(m_tabListColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_tabListColor, this, "Select Tab List Color");
        if (chosen.isValid()) {
            m_tabListColor = chosen;
            updateButtonColor(m_tabListColorButton, m_tabListColor);
        }
    });
    connect(m_topBarColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_topBarColor, this, "Select Top Bar Color");
        if (chosen.isValid()) {
            m_topBarColor = chosen;
            updateButtonColor(m_topBarColorButton, m_topBarColor);
        }
    });
    connect(m_accent1ColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_accent1Color, this, "Select Accent1 Color");
        if (chosen.isValid()) {
            m_accent1Color = chosen;
            updateButtonColor(m_accent1ColorButton, m_accent1Color);
        }
    });
    connect(m_accent2ColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_accent2Color, this, "Select Accent2 Color");
        if (chosen.isValid()) {
            m_accent2Color = chosen;
            updateButtonColor(m_accent2ColorButton, m_accent2Color);
        }
    });
    connect(m_fontColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_fontColor, this, "Select Font Color");
        if (chosen.isValid()) {
            m_fontColor = chosen;
            updateButtonColor(m_fontColorButton, m_fontColor);
        }
    });
    connect(m_buttonColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_buttonColor, this, "Select Button Color");
        if (chosen.isValid()) {
            m_buttonColor = chosen;
            updateButtonColor(m_buttonColorButton, m_buttonColor);
        }
    });
    connect(m_linkColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_linkColor, this, "Select Link Color");
        if (chosen.isValid()) {
            m_linkColor = chosen;
            updateButtonColor(m_linkColorButton, m_linkColor);
        }
    });
    connect(m_highlightColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_highlightColor, this, "Select Highlight Color");
        if (chosen.isValid()) {
            m_highlightColor = chosen;
            updateButtonColor(m_highlightColorButton, m_highlightColor);
        }
    });
    connect(m_alternateBaseColorButton, &QPushButton::clicked, this, [this](){
        QColor chosen = QColorDialog::getColor(m_alternateBaseColor, this, "Select Alternate Base Color");
        if (chosen.isValid()) {
            m_alternateBaseColor = chosen;
            updateButtonColor(m_alternateBaseColorButton, m_alternateBaseColor);
        }
    });

    // Set overall dialog style with rounded corners and no visible borders.
    QString mainDialogStyle = QString(
                                  "QDialog {"
                                  "    border: none;"
                                  "    border-radius: 15px;"
                                  "    background-color: %1;"
                                  "}"
                                  ).arg(m_backgroundColor.name());
    this->setStyleSheet(mainDialogStyle);

    // Create a QTabWidget for the Theme and Bookmarks sections.
    QTabWidget *tabWidget = new QTabWidget(this);
    // (No modified margins, so the widget does not stretch edge-to-edge.)

    // Apply style to center the tabs, remove borders, and round only the top corners.
    QString tabStyle = QString(
                           "QTabWidget::tab-bar { alignment: center; }"
                           "QTabWidget::pane { border: none; border-radius: 15px; }"
                           "QTabBar::tab {"
                           "    background: %1;"           // Use tabListColor for tab backgrounds.
                           "    color: %2;"
                           "    padding: 10px;"
                           "    border: none;"
                           "    border-top-left-radius: 10px;"
                           "    border-top-right-radius: 10px;"
                           "    border-bottom-left-radius: 0px;"
                           "    border-bottom-right-radius: 0px;"
                           "    margin: 0 1px;"
                           "}"
                           "QTabBar::tab:selected {"
                           "    background: %1;"
                           "}"
                           ).arg(m_tabListColor.name(), m_fontColor.name());
    tabWidget->setStyleSheet(tabStyle);

    // ----- Theme Tab
    QWidget *themeTab = new QWidget();
    QVBoxLayout *themeLayout = new QVBoxLayout(themeTab);
    // (Using default content margins so it doesn't stretch edge-to-edge.)

    QFormLayout *formLayout = new QFormLayout;
    formLayout->addRow("Default Search Engine:", m_searchEngineEdit);
    formLayout->addRow("Background Color:", m_backgroundColorButton);
    formLayout->addRow("Tab List Color:", m_tabListColorButton);
    formLayout->addRow("Top Bar Color:", m_topBarColorButton);
    formLayout->addRow("Accent1 Color:", m_accent1ColorButton);
    formLayout->addRow("Accent2 Color:", m_accent2ColorButton);
    formLayout->addRow("Font Color:", m_fontColorButton);
    formLayout->addRow("Button Color:", m_buttonColorButton);
    formLayout->addRow("Link Color:", m_linkColorButton);
    formLayout->addRow("Highlight Color:", m_highlightColorButton);
    formLayout->addRow("Alternate Base Color:", m_alternateBaseColorButton);
    themeLayout->addLayout(formLayout);

    m_randomizePaletteButton = new QPushButton("Randomize Colors", this);
    QString btnStyle = QString(
                           "QPushButton {"
                           "    background-color: %1;"
                           "    color: %2;"
                           "    border: none;"
                           "    padding: 5px;"
                           "    border-radius: 10px;"
                           "}"
                           ).arg(m_buttonColor.name(), m_fontColor.name());
    m_randomizePaletteButton->setStyleSheet(btnStyle);
    connect(m_randomizePaletteButton, &QPushButton::clicked, this, &SettingsDialog::onRandomizeClicked);
    themeLayout->addWidget(m_randomizePaletteButton);

    tabWidget->addTab(themeTab, "Theme");

    // ----- Bookmarks Tab
    QWidget *bookmarksTab = new QWidget();
    bookmarksTab->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    QVBoxLayout *bookmarkLayout = new QVBoxLayout(bookmarksTab);
    // (Using default margins to keep it from stretching completely to the edge.)

    QListWidget *bookmarkList = new QListWidget(bookmarksTab);
    // Remove scrollbars and any default frame from the bookmarks list.
    bookmarkList->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    bookmarkList->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    bookmarkList->setFrameShape(QFrame::NoFrame);

    // Populate the bookmark list from settings.
    QVariantList bookmarks = settings.value("Bookmarks").toList();
    for (const QVariant &var : bookmarks) {
        QVariantMap bm = var.toMap();
        QString title = bm["title"].toString();
        QString url   = bm["url"].toString();
        QListWidgetItem *item = new QListWidgetItem(title, bookmarkList);
        item->setData(Qt::UserRole, url);
    }
    bookmarkLayout->addWidget(bookmarkList);

    // Apply user-defined theme colors to the Bookmarks tab,
    // overriding global borders by explicitly setting "border: 0px;".
    QString bkStyle = QString(
                          "QWidget {"
                          "    background-color: %1;"
                          "    color: %2;"
                          "    border: 0px;"
                          "}"
                          "QListWidget {"
                          "    background-color: %1;"
                          "    color: %2;"
                          "    border: 0px;"
                          "}"
                          "QListWidget::item:selected {"
                          "    background-color: %3;"
                          "}"
                          "QPushButton {"
                          "    background-color: %3;"
                          "    color: %2;"
                          "    border-radius: 10px;"
                          "    padding: 5px;"
                          "}"
                          ).arg(m_tabListColor.name(), m_fontColor.name(), m_buttonColor.name());
    bookmarksTab->setStyleSheet(bkStyle);

    // Context menu to delete bookmarks.
    connect(bookmarkList, &QListWidget::customContextMenuRequested,
            [this, bookmarkList](const QPoint &pos) {
                QListWidgetItem *item = bookmarkList->itemAt(pos);
                if (!item)
                    return;
                QMenu menu;
                QAction *deleteAction = new QAction("Delete Bookmark", &menu);
                connect(deleteAction, &QAction::triggered, [this, bookmarkList, item]() {
                    QSettings settings("PraedoBrowser", "PraedoBrowser");
                    QVariantList bookmarks = settings.value("Bookmarks").toList();
                    QString url = item->data(Qt::UserRole).toString();
                    QString title = item->text();
                    for (int i = 0; i < bookmarks.size(); ++i) {
                        QVariantMap bm = bookmarks[i].toMap();
                        if (bm["url"].toString() == url && bm["title"].toString() == title) {
                            bookmarks.removeAt(i);
                            break;
                        }
                    }
                    settings.setValue("Bookmarks", bookmarks);
                    settings.sync();
                    delete bookmarkList->takeItem(bookmarkList->row(item));
                    MainWindow *mainWin = qobject_cast<MainWindow*>(this->window());
                    if (!mainWin)
                        mainWin = qobject_cast<MainWindow*>(QApplication::activeWindow());
                    if (mainWin)
                        mainWin->refreshBookmarkBar();
                });
                menu.addAction(deleteAction);
                menu.exec(bookmarkList->viewport()->mapToGlobal(pos));
            });
    tabWidget->addTab(bookmarksTab, "Bookmarks");

    // ----- Final Layout: Add the tab widget and OK/Cancel buttons.
    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    // (No call to setContentsMargins(0,0,0,0) here; using default margins.)
    mainLayout->addWidget(tabWidget);

    m_okButton = new QPushButton("OK", this);
    m_cancelButton = new QPushButton("Cancel", this);
    m_okButton->setStyleSheet(btnStyle);
    m_cancelButton->setStyleSheet(btnStyle);
    QHBoxLayout *buttonLayout = new QHBoxLayout;
    buttonLayout->addStretch();
    buttonLayout->addWidget(m_okButton);
    buttonLayout->addWidget(m_cancelButton);
    mainLayout->addLayout(buttonLayout);

    connect(m_okButton, &QPushButton::clicked, this, &SettingsDialog::onOkClicked);
    connect(m_cancelButton, &QPushButton::clicked, this, &SettingsDialog::onCancelClicked);
}

SettingsDialog::~SettingsDialog()
{
}

QString SettingsDialog::defaultSearchEngine() const
{
    return m_searchEngineEdit->text();
}

QString SettingsDialog::backgroundColor() const
{
    return m_backgroundColor.name();
}

void SettingsDialog::onOkClicked()
{
    QSettings settings("PraedoBrowser", "PraedoBrowser");
    settings.setValue("defaultSearchEngine", m_searchEngineEdit->text());
    settings.setValue("backgroundColor", m_backgroundColor.name());
    settings.setValue("tabListColor", m_tabListColor.name());
    settings.setValue("topBarColor", m_topBarColor.name());
    settings.setValue("accent1Color", m_accent1Color.name());
    settings.setValue("accent2Color", m_accent2Color.name());
    settings.setValue("fontColor", m_fontColor.name());
    settings.setValue("buttonColor", m_buttonColor.name());
    settings.setValue("linkColor", m_linkColor.name());
    settings.setValue("highlightColor", m_highlightColor.name());
    settings.setValue("alternateBaseColor", m_alternateBaseColor.name());

    emit settingsUpdated();
    accept();
}

void SettingsDialog::onCancelClicked()
{
    reject();
}

void SettingsDialog::onRandomizeClicked()
{
    const int colorCount = 10;
    QColor newColors[colorCount];
    for (int i = 0; i < colorCount; ++i) {
        newColors[i] = generateRandomColor();
    }
    m_backgroundColor    = newColors[0];
    m_tabListColor       = newColors[1];
    m_topBarColor        = newColors[2];
    m_accent1Color       = newColors[3];
    m_accent2Color       = newColors[4];
    m_fontColor          = newColors[5];
    m_buttonColor        = newColors[6];
    m_linkColor          = newColors[7];
    m_highlightColor     = newColors[8];
    m_alternateBaseColor = newColors[9];
    updateButtonColor(m_backgroundColorButton, m_backgroundColor);
    updateButtonColor(m_tabListColorButton, m_tabListColor);
    updateButtonColor(m_topBarColorButton, m_topBarColor);
    updateButtonColor(m_accent1ColorButton, m_accent1Color);
    updateButtonColor(m_accent2ColorButton, m_accent2Color);
    updateButtonColor(m_fontColorButton, m_fontColor);
    updateButtonColor(m_buttonColorButton, m_buttonColor);
    updateButtonColor(m_linkColorButton, m_linkColor);
    updateButtonColor(m_highlightColorButton, m_highlightColor);
    updateButtonColor(m_alternateBaseColorButton, m_alternateBaseColor);
}
